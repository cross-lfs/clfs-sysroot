<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="ch-intro-how">
  <?dbhtml filename="how.html"?>

  <title>How to Build a CLFS System</title>

  <para>The CLFS system will be built by using a previously installed
  Linux distribution (such as Debian, Mandrake, Red Hat, or SuSE). This
  existing Linux system (the host) will be used as a starting point to
  provide necessary programs, including a compiler, linker, and shell,
  to build the new system. Select the <quote>development</quote> option
  during the distribution installation to be able to access these
  tools.</para>

  <para>As an alternative to installing an entire separate distribution
  onto your machine, you may wish to
  use the Linux From Scratch LiveCD. The CD works well as a host system,
  providing all the tools you need to successfully follow the instructions
  in this book. Additionally, it contains all the source packages, patches
  and a copy of this book. So once you have the CD, no network connection
  or additional downloads are necessary. For more information about the
  LFS LiveCD or to download a copy, visit <ulink url="&livecd-root;"/></para>

  <!-- -->
  <para>THE TEXT BELOW NEEDS TO BE REWRITTEN</para>

  <para><xref linkend="chapter-partitioning"/> of this book describes how
  to create a new Linux native partition and file system, the place
  where the new CLFS system will be compiled and installed. <xref
  linkend="chapter-getting-materials"/> explains which packages and
  patches need to be downloaded to build a CLFS system and how to store
  them on the new file system. <xref linkend="chapter-final-preps"/>
  discusses the setup for an appropriate working environment. Please read
  <xref linkend="chapter-final-preps"/> carefully as it explains several
  important issues the developer should be aware of before beginning to
  work through <xref linkend="chapter-cross-tools"/> and
  beyond.</para>

  <para><xref linkend="chapter-cross-tools"/> explains the installation of
  cross-compile tools which will be built on the host but be able to compile
  programs that run on the target machine. These cross-compile tools will
  be used to create a temporary, minimal system that will be the basis for
  building the final CLFS system. Some of these packages are needed to resolve
  circular dependencies&mdash;for example, to compile a compiler, you need a
  compiler.</para>

  <para>The process of building cross-compile tools first involves installing
  binutils into ${LFS}/cross-tools, so that the linker can be used with the building
  of everything else in the temp-system. GCC is then compiled statically and
  installed into ${LFS}/cross-tools, and this cross-compiler is used to build glibc
  into /tools for the temp-system. The GCC cross-compiler is then rebuilt
  dynamically - this final cross-compiler is what will be used to build the
  rest of the temporary system. When this is done, the CLFS installation
  process will no longer depend on the host distribution, with the exception
  of the running kernel.
  <!-- still needs some work - needs to provide a better technical
explanation, especially the reasoning for compiling gcc statically then dynamically... --></para>

  <para>The packages in <!-- <xref linkend="chapter-temp-system"/> --> are then built
  using the cross-compiled tools in ${LFS}/cross-tools, and linked against the
  C library that was installed during the building of the cross-tools.</para>

  <para>This effort to isolate the new system from the host distribution
  may seem excessive, but a full technical explanation is provided at the
  beginning of <!-- <xref linkend="chapter-temp-system"/> -->.</para>

  <para>In <xref linkend="chapter-building-system"/>, the full CLFS system is
  built. Depending on the system you are cross-compiling for, either you will
  boot the minimal temp-system on the target machine, or chroot into it.</para>

  <para>The <command>chroot</command> (change root) program is used to enter
  a virtual environment and start a new shell whose root directory will be set
  to the CLFS partition. This is very similar to rebooting and instructing the
  kernel to mount the CLFS partition as the root partition.
  The major advantage is that <quote>chrooting</quote> allows the builder to
  continue using the host while CLFS is being built. While waiting for package
  compilation to complete, a user can switch to a different virtual console
  (VC) or X desktop and continue using the computer as normal.</para>

  <para>Some systems cannot be built by chrooting so they must be
  booted instead. Generally, if you building for a different arch than
  the host system, you must reboot because the kernel will likely not
  support the target machine. Booting involves installing a few
  additional packages that are needed for bootup, installing
  bootscripts, and building a miminal kernel.</para>

  <para>To finish the installation, the CLFS-Bootscripts are set up in <xref
  linkend="chapter-bootscripts"/>, and the kernel and boot loader are set
  up in <xref linkend="chapter-bootable"/>. <xref
  linkend="chapter-finalizing"/> contains information on furthering the
  CLFS experience beyond this book.  After the steps in this book have
  been implemented, the computer will be ready to reboot into the new
  CLFS system.</para>
  <!-- -->

  <para>This is the process in a nutshell. Detailed information on each
  step is discussed in the following chapters and package descriptions.
  Items that may seem complicated will be clarified, and everything will
  fall into place as the reader embarks on the CLFS adventure.</para>

</sect1>
